# ========================== Imports ==========================import pandas as pdimport numpy as npimport numpy_financial as npfimport yfinance as yfimport cvxpy as cp# ========================== Helper Functions ==========================def get_index_data(ticker, start_date, end_date, filename):    data = yf.Ticker(ticker).history(period='1d', start=start_date, end=end_date)    df = pd.DataFrame({'date': data.index.strftime('%Y-%m-%d'), ticker: data['Close'].values})    df.to_excel(filename, index=False)    return dfdef calculate_cagr(start_value, future_value, annual_contribution, n_years, delay=1):    rate = npf.rate(n_years - delay, -annual_contribution, -start_value, future_value)    cumulative_return = ((1 + rate) ** n_years) - 1    return rate, cumulative_returndef required_returns(target_value, cash_flows):    returns = [((target_value - cf) / target_value) - 1 for cf in cash_flows]    return returns, np.mean(returns)def fetch_asset_data(tickers, start_date, end_date):    data = pd.DataFrame()    for ticker in tickers:        close = yf.Ticker(ticker).history(start=start_date, end=end_date)['Close']        data[ticker] = close.resample('M').last()    return datadef annualized_return(df):    return ((1 + df).prod()) ** (12 / len(df)) - 1def annualized_covariance(df):    return df.cov() * 12def mean_std(df):    return df.std().mean() * np.sqrt(12)